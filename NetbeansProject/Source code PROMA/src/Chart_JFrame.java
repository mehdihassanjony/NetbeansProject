/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Chart_JFrame.java
 *
 * Created on Feb 11, 2012, 10:16:24 PM
 */
/**
 *
 * @author 9589693153
 */
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.math.BigDecimal;
import java.sql.*;
import java.text.DateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import javax.swing.*;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

public class Chart_JFrame extends javax.swing.JFrame {
Connection conn=null;
ResultSet rs = null;
PreparedStatement pst=null;
    /** Creates new form Chart_JFrame */
    public Chart_JFrame() {
        initComponents();
         conn=ConnectionPROMA .ConnecrDb();
      
        CurrentDate();
        
    }
    public void close2() {
WindowEvent winClosingEvent = new WindowEvent( this, WindowEvent.WINDOW_CLOSING );
Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent( winClosingEvent );
}
public void CurrentDate(){
    
  
  Calendar cal = new GregorianCalendar();
  int month = cal.get(Calendar.MONTH);
  int year = cal.get(Calendar.YEAR);
  int day = cal.get(Calendar.DAY_OF_MONTH);
  Lbl_Date.setText("                                                                      Date : "   + day + "/" + (month + 1) + "/" + year);
  System.out.println("Current date : " 
  + day + "/" + (month + 1) + "/" + year);
  }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        cmd_AvaitabilityBarChart = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        Combo_parameter = new javax.swing.JComboBox();
        Lbl_Date = new javax.swing.JLabel();
        cmd_back = new javax.swing.JButton();

        jButton3.setText("jButton3");

        setTitle("Chart");

        cmd_AvaitabilityBarChart.setFont(new java.awt.Font("Tahoma", 1, 14));
        cmd_AvaitabilityBarChart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/column-chart-icon.png"))); // NOI18N
        cmd_AvaitabilityBarChart.setText("Availability Bar Chart                    ");
        cmd_AvaitabilityBarChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_AvaitabilityBarChartActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 14));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Graph-icon.png"))); // NOI18N
        jButton2.setText("Availability Percentage Graph        ");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/stock-market-icon.png"))); // NOI18N
        jButton1.setText("Non Availability Percentage Graph");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Graph Of the Particular Parameter"));

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ok-icon (1).png"))); // NOI18N
        jButton4.setText("OK");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        Combo_parameter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Parameter", "Pressure1", "Pressure2", "Pressure3", "VolumeFlow", "Temperature", "RotationalSpeed", "Torque" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(Combo_parameter, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jButton4)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Combo_parameter, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        Lbl_Date.setFont(new java.awt.Font("Tahoma", 1, 12));
        Lbl_Date.setText("Date");

        cmd_back.setFont(new java.awt.Font("Tahoma", 1, 14));
        cmd_back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/back-icon.png"))); // NOI18N
        cmd_back.setText("Back");
        cmd_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_backActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmd_AvaitabilityBarChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(142, 142, 142))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(cmd_back)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 617, Short.MAX_VALUE)
                .addComponent(Lbl_Date))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Lbl_Date))
                    .addComponent(cmd_back))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmd_AvaitabilityBarChart)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap(89, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmd_AvaitabilityBarChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_AvaitabilityBarChartActionPerformed
         //   Table_JFrame p = new Table_JFrame();
    //  p.setVisible(true);
    //  close();
       // String gender=Combo_parameter.getSelectedItem().toString();
      
      
        {
     
                         
    try{
        int counter1 = 0,counter2 = 0,counter3 = 0;
        
        
        String sql1=" SELECT idpump,Date,Pressure1 FROM pump  ";
    pst =conn.prepareStatement(sql1);
    rs=pst.executeQuery();
    
 
         while(rs.next()){
             double pressure11 = rs.getDouble("pressure1");
             //System.out.println(pressure11);
             
             if(pressure11<=10.0 && pressure11>=0.0){
      
         counter1++;
        }
        if(pressure11 <=11.0 && pressure11>10.0){
       
       counter2++;
        }
        if(pressure11 > 11.0){
      
       counter3++;
        }
        
    }
         
         double  avail = (counter1 + counter2);
          divide1 = (counter1 + counter2 + counter3 );
         divide1 =( avail/divide1 ) * 100;
         
         System.out.printf("Value: %.2f", divide1);
         
         String avail1 = Double.toString(divide1);
         int hello=(int)divide1;
         
    }
    catch(Exception e)
    {
           JOptionPane.showMessageDialog(null, e);

    }
        finally {
try{
  rs.close();
   pst.close();
     //conn.close();
  }
  catch(Exception e) {
                   }
      }  
      }
       
       
        {
     
       try{
        int counter1 = 0,counter2 = 0,counter3 = 0;
        
        
        String sql1=" SELECT idpump,Date,Pressure2 FROM pump  ";
    pst =conn.prepareStatement(sql1);
    rs=pst.executeQuery();
    
  
         while(rs.next()){
             double pressure22 = rs.getDouble("pressure2");
             //System.out.println(pressure22);
             
             if(pressure22<=10.0 && pressure22>=0.0){
      
         counter1++;
        }
        if(pressure22 <=11.0 && pressure22>10.0){
        
       counter2++;
        }
        if(pressure22 > 11.0){
       
       counter3++;
        }
        
    }
         
       
         double  avail = (counter1 + counter2);
          divide2 = (counter1 + counter2 + counter3 );
         divide2 =( avail/divide2 ) * 100;
         int hello=(int)divide2;
         
        
         System.out.printf("Value: %.2f", divide2);
       
         String avail1 = Double.toString(divide2);
         
        
    }
    catch(Exception e)
    {
           JOptionPane.showMessageDialog(null, e);

    }
        finally {
try{
  rs.close();
   pst.close();
     //conn.close();
  }
  catch(Exception e) {
                   }
      }  
      
      }
        
        {
     
       try{
        int counter1 = 0,counter2 = 0,counter3 = 0;
        
        
        String sql1=" SELECT idpump,Date,Pressure3 FROM pump  ";
    pst =conn.prepareStatement(sql1);
    rs=pst.executeQuery();
    
   // pst.setString(1, jTextField1.getText());
  //  String pr1=rs.getString("MAX(Pressure1)");
    // int pe1 =Integer.parseInt(pr1);
  // jTextField_pr1.setText(pr1);
    // int Max_pressure1=Integer.parseInt(add1);
    //jSlider1_pressure1.setMaximum(Max_pressure1);
         while(rs.next()){
             double pressure33 = rs.getDouble("pressure3");
             //System.out.println(pressure33);
             
             if(pressure33<=500 && pressure33>=0){
      
         counter1++;
        }
        if(pressure33 >=501 && pressure33<=525){
        
       counter2++;
        }
        if(pressure33>525){
       
       counter3++;
        }
        
    }
         
      
         double  avail = (counter1 + counter2);
          divide3 = (counter1 + counter2 + counter3 );
         divide3 =( avail/divide3 ) * 100;
         int hello=(int)divide3;
        
         System.out.printf("Value: %.2f", divide3);
      
         String avail1 = Double.toString(divide3);
         
        
    }
    catch(Exception e)
    {
           JOptionPane.showMessageDialog(null, e);

    }
         finally {
try{
  rs.close();
   pst.close();
     //conn.close();
  }
  catch(Exception e) {
                   }
      }  
      
      }
         
          {
    
           try{
        int counter1 = 0,counter2 = 0,counter3 = 0;
        
        
        String sql1=" SELECT idpump,Date,VolumeFlow FROM pump  ";
    pst =conn.prepareStatement(sql1);
    rs=pst.executeQuery();
    
   // pst.setString(1, jTextField1.getText());
  //  String pr1=rs.getString("MAX(Pressure1)");
    // int pe1 =Integer.parseInt(pr1);
  // jTextField_pr1.setText(pr1);
    // int Max_pressure1=Integer.parseInt(add1);
    //jSlider1_pressure1.setMaximum(Max_pressure1);
         while(rs.next()){
             double volumeflow = rs.getDouble("VolumeFlow");
             //System.out.println(volumeflow);
             
         if(volumeflow<=500 && volumeflow>=0){
      
         counter1++;
        }
        if(volumeflow >=501 && volumeflow>=525){
        
       counter2++;
        }
        if(volumeflow>525){
       
       counter3++;
        }
        
        
        
        
        
        
        
        
        
    }
         
       
         double  avail = (counter1 + counter2);
          divide4 = (counter1 + counter2 + counter3 );
         divide4 =( avail/divide4 ) * 100;
         int hello=(int)divide4;
        
         System.out.printf("Value: %.2f", divide4);
        
         String avail1 = Double.toString(divide4);
         
       
    }
    catch(Exception e)
    {
           JOptionPane.showMessageDialog(null, e);

    }
     
        finally {
try{
  rs.close();
   pst.close();
     //conn.close();
  }
  catch(Exception e) {
                   }
      }  
      }
          
          
           {
      
  
       try{
        int counter1 = 0,counter2 = 0,counter3 = 0;
        
        
        String sql1=" SELECT idpump,Date,Temperature FROM pump  ";
    pst =conn.prepareStatement(sql1);
    rs=pst.executeQuery();
    
   // pst.setString(1, jTextField1.getText());
  //  String pr1=rs.getString("MAX(Pressure1)");
    // int pe1 =Integer.parseInt(pr1);
  // jTextField_pr1.setText(pr1);
    // int Max_pressure1=Integer.parseInt(add1);
    //jSlider1_pressure1.setMaximum(Max_pressure1);
         while(rs.next()){
             double Temperature1 = rs.getDouble("Temperature");
             //System.out.println(Temperature1);
             
         if(Temperature1<=60 && Temperature1>=0){
      
         counter1++;
        }
        if(Temperature1 <=0 && Temperature1>=-3  ||  (Temperature1 >=60 && Temperature1<=63)){
        
       counter2++;
        }
        if(Temperature1>63){
       
       counter3++;
        }
        
      
        
        
        
        
    }
         
       String red1 = Double.toString(counter3);
           
         double  avail = (counter1 + counter2);
         divide5 = (counter1 + counter2 + counter3 );
         divide5 =( avail/divide5 ) * 100;
         int hello=(int)divide5;
        
         System.out.printf("Value: %.2f", divide5);
         
         String avail1 = Double.toString(divide5);
         
        
    }
    catch(Exception e)
    {
           JOptionPane.showMessageDialog(null, e);

    }
     
        finally {
try{
  rs.close();
   pst.close();
     //conn.close();
  }
  catch(Exception e) {
                   }
      }  
      
      }
           
           
       {
    
     
       try{
        int counter1 = 0,counter2 = 0,counter3 = 0;
        
        
        String sql1=" SELECT idpump,Date,RotationalSpeed FROM pump  ";
    pst =conn.prepareStatement(sql1);
    rs=pst.executeQuery();
    
   // pst.setString(1, jTextField1.getText());
  //  String pr1=rs.getString("MAX(Pressure1)");
    // int pe1 =Integer.parseInt(pr1);
  // jTextField_pr1.setText(pr1);
    // int Max_pressure1=Integer.parseInt(add1);
    //jSlider1_pressure1.setMaximum(Max_pressure1);
         while(rs.next()){
             double rotationalspeed1 = rs.getDouble("RotationalSpeed");
             //System.out.println(rotationalspeed1);
             
         if(rotationalspeed1<=6000){
      
         counter1++;
        }
        if(rotationalspeed1  <=6120 && rotationalspeed1>=6001 ){
        
       counter2++;
        }
        if(rotationalspeed1>6120){
       
       counter3++;
        }
        
       
        
        
        
    }
       
         double  avail = (counter1 + counter2);
          divide6 = (counter1 + counter2 + counter3 );
         divide6 =( avail/divide6 ) * 100;
         int hello=(int)divide6;
        
         System.out.printf("Value: %.2f", divide6);
        
         String avail1 = Double.toString(divide6);
         
        
    }
    catch(Exception e)
    {
           JOptionPane.showMessageDialog(null, e);

    }
     
        finally {
try{
  rs.close();
   pst.close();
     //conn.close();
  }
  catch(Exception e) {
                   }
      }  
      
      
      }           

        
           {
     
      try{
        int counter1 = 0,counter2 = 0,counter3 = 0;
        
        
        String sql1=" SELECT idpump,Date,Torque FROM pump  ";
    pst =conn.prepareStatement(sql1);
    rs=pst.executeQuery();
    
   // pst.setString(1, jTextField1.getText());
  //  String pr1=rs.getString("MAX(Pressure1)");
    // int pe1 =Integer.parseInt(pr1);
  // jTextField_pr1.setText(pr1);
    // int Max_pressure1=Integer.parseInt(add1);
    //jSlider1_pressure1.setMaximum(Max_pressure1);
         while(rs.next()){
             double torque1 = rs.getDouble("Torque");
            // System.out.println(torque1);
             
         if(torque1 <=200 && torque1>=0){
      
         counter1++;
        }
        if(torque1  <=210 && torque1>=201){
        
       counter2++;
        }
        if(torque1>210){
       
       counter3++;
        }
        
        
    
        
        
        
        
    }
         
       String red1 = Double.toString(counter3);
           
         double  avail = (counter1 + counter2);
          divide7 = (counter1 + counter2 + counter3 );
         divide7 =( avail/divide7 ) * 100;
         int hello=(int)divide7;
        
         System.out.printf("Value: %.2f", divide7);
         
         String avail1 = Double.toString(divide7);
         
        
    }
    catch(Exception e)
    {
           JOptionPane.showMessageDialog(null, e);

    }
     
        finally {
try{
  rs.close();
   pst.close();
     //conn.close();
  }
  catch(Exception e) {
                   }
      }  
      
      
      
      } 
        
        
      {
           try{
        String sql=" SELECT * FROM pump ";
    pst =conn.prepareStatement(sql);
    rs=pst.executeQuery();
    //pst.execute();
         
    }catch(Exception e)
    {
           JOptionPane.showMessageDialog(null, e);

    }
      
      
       finally {
try{
  rs.close();
   pst.close();
     //conn.close();
  }
  catch(Exception e) {
                   }
      }   
      }
       
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
      
       dataset.setValue(divide1, "Availability", "pressure1");
          dataset.setValue(divide2, "Availability", "pressure2"); 
          dataset.setValue(divide3, "Availability", "pressure3"); 
        dataset.setValue(divide4, "Availability", "Volume Flow"); 
        dataset.setValue(divide5, "Availability", "Temperature"); 
      dataset.setValue(divide6, "Availability", "Rotational Speed"); 
       dataset.setValue(divide7, "Availability", "Torque");
  JFreeChart chart = ChartFactory.createBarChart
  ("Total Availability","Parameter", "Availability Percentage", dataset, 
   PlotOrientation.VERTICAL, false,true, false);
  chart.setBackgroundPaint(Color.yellow);
  chart.getTitle().setPaint(Color.blue); 
  CategoryPlot p = chart.getCategoryPlot(); 
  p.setRangeGridlinePaint(Color.red); 
  ChartFrame frame1=new ChartFrame("Total Availability",chart);
  frame1.setVisible(true);
  frame1.setSize(900,450);
    }//GEN-LAST:event_cmd_AvaitabilityBarChartActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        double divide_torque=0,divide_rotationalspeed=0,divide_Temperature=0,divide_volumeflow=0,divide_pr1=0,divide_pr2=0,divide_pr3=0;
 

       
         try{
        
        String sql1=" SELECT Count(idpump) FROM pump  ";
    pst =conn.prepareStatement(sql1);
    rs=pst.executeQuery();
    
   // pst.setString(1, jTextField1.getText());
    String count_pr1=rs.getString("Count(idpump)");
      count_p1_intform =Integer.parseInt(count_pr1);
        
         }catch(Exception e)
    {
           JOptionPane.showMessageDialog(null, e);

    }  finally {
try{
  rs.close();
   pst.close();
     //conn.close();
  }
  catch(Exception e) {
                   }
      }  
             try{
        
      
            // pst.setString(1, jTextField1.getText());
    XYSeries series =new XYSeries("Graph");
    for(int i=1;i<=count_p1_intform;i++){
       /*   String sql1=" SELECT pressure1 FROM pump where idpump ='"+i+"' ";
    pst =conn.prepareStatement(sql1);
    rs=pst.executeQuery();
      String  value_pr1 = rs.getString("pressure1");
      int value_pr1_intform =Integer.parseInt(value_pr1);
     if( value_pr1_intform<=10.0 &&  value_pr1_intform>=0.0){
       series.add(i, value_pr1_intform);
         counter1++;
        }*/
       
     int counter1 = 0,counter2 = 0,counter3 = 0,counter4 = 0,counter5 = 0,counter6 = 0,counter7 = 0;
     
       
                 String sql1=" SELECT * FROM pump where idpump ='"+i+"' ";

    pst =conn.prepareStatement(sql1);
    rs=pst.executeQuery();
    

         while(rs.next()){
             double pressure11 = rs.getDouble("pressure1");
             //System.out.println(pressure11);
             
             if(pressure11<=5 && pressure11>=0.0){
      
         counter1++;
        }
       
         double pressure22 = rs.getDouble("pressure2");
             //System.out.println(pressure22);
             
             if(pressure22<=10.0 && pressure22>=0.0){
      
         counter2++;
        }
             
              double pressure33 = rs.getDouble("pressure3");
             //System.out.println(pressure33);
             
             if(pressure33<=500 && pressure33>=0){
      
         counter3++;
        }
             
             double volumeflow = rs.getDouble("VolumeFlow");
             //System.out.println(volumeflow);
             
         if(volumeflow<=500 && volumeflow>=0){
      
         counter4++;
        }
             
         double Temperature1 = rs.getDouble("Temperature");
             //System.out.println(Temperature1);
             
         if(Temperature1<=60 && Temperature1>=0){
      
         counter5++;
        }
         
          double rotationalspeed1 = rs.getDouble("RotationalSpeed");
             //System.out.println(rotationalspeed1);
             
         if(rotationalspeed1<=6000){
      
         counter6++;
        }
           double torque1 = rs.getDouble("Torque");
            // System.out.println(torque1);
             
         if(torque1 <=200 && torque1>=0){
      
         counter7++;
        }
             
             
             
             
    }
         
 
 
    sum_availability  =counter1+counter2+counter3+counter4+counter5+counter6+counter7;
      total_availability =((sum_availability/7)*100);  
       int total_hello=(int)total_availability;
        // jProgressBar_availability_total.setValue(total_hello);
         String avail1 = Double.toString(total_availability);
         float x = Float.parseFloat(avail1);
    int decimalPlace = 2;
    BigDecimal bd = new BigDecimal(x);
    bd = bd.setScale(decimalPlace,BigDecimal.ROUND_UP);
    x = bd.floatValue();
         String total_availability_string = Float.toString(x);
          String total_availability_string1="Availability Percentage:  "+total_availability_string;
     String sql="update pump set Availability='"+total_availability_string+"'where idpump ='"+i+"' ";
             pst =conn.prepareStatement(sql);
    pst.execute();
      series.add(i, total_availability);
    
     
       //System.out.println(total_availability);
        
    }
     XYSeriesCollection dataset =new XYSeriesCollection();
         dataset.addSeries(series);
         JFreeChart chart =ChartFactory.createXYLineChart("Availability Percentage Per Day", "Day", "Percentage(%)", dataset, PlotOrientation.VERTICAL, true,true,false);
        ChartFrame frame = new ChartFrame("Availability Percentage Per Day",chart);
        frame.pack();
        frame.setVisible(true);
    
         }catch(Exception e)
    {
           JOptionPane.showMessageDialog(null, e);

    }
        finally {
try{
  rs.close();
   pst.close();
     //conn.close();
  }
  catch(Exception e) {
                   }
      }  
       //  txt_availability_total.setText(avail1);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        double divide_torque=0,divide_rotationalspeed=0,divide_Temperature=0,divide_volumeflow=0,divide_pr1=0,divide_pr2=0,divide_pr3=0;
 

       
         try{
        
        String sql1=" SELECT Count(idpump) FROM pump  ";
    pst =conn.prepareStatement(sql1);
    rs=pst.executeQuery();
    
   // pst.setString(1, jTextField1.getText());
    String count_pr1=rs.getString("Count(idpump)");
      count_p1_intform =Integer.parseInt(count_pr1);
        
         }catch(Exception e)
    {
           JOptionPane.showMessageDialog(null, e);

    }
         finally {
try{
  rs.close();
   pst.close();
     //conn.close();
  }
  catch(Exception e) {
                   }
      }    
             try{
        
      
            // pst.setString(1, jTextField1.getText());
    XYSeries series =new XYSeries("Graph");
    for(int i=1;i<=count_p1_intform;i++){
       /*   String sql1=" SELECT pressure1 FROM pump where idpump ='"+i+"' ";
    pst =conn.prepareStatement(sql1);
    rs=pst.executeQuery();
      String  value_pr1 = rs.getString("pressure1");
      int value_pr1_intform =Integer.parseInt(value_pr1);
     if( value_pr1_intform<=10.0 &&  value_pr1_intform>=0.0){
       series.add(i, value_pr1_intform);
         counter1++;
        }*/
       
     int counter1 = 0,counter2 = 0,counter3 = 0,counter4 = 0,counter5 = 0,counter6 = 0,counter7 = 0;
     
       
                 String sql1=" SELECT * FROM pump where idpump ='"+i+"' ";

    pst =conn.prepareStatement(sql1);
    rs=pst.executeQuery();
    

         while(rs.next()){
             double pressure11 = rs.getDouble("pressure1");
             //System.out.println(pressure11);
             
             if(pressure11<=5 && pressure11>=0.0){
      
         counter1++;
        }
       
         double pressure22 = rs.getDouble("pressure2");
             //System.out.println(pressure22);
             
             if(pressure22<=10.0 && pressure22>=0.0){
      
         counter2++;
        }
             
              double pressure33 = rs.getDouble("pressure3");
             //System.out.println(pressure33);
             
             if(pressure33<=500 && pressure33>=0){
      
         counter3++;
        }
             
             double volumeflow = rs.getDouble("VolumeFlow");
             //System.out.println(volumeflow);
             
         if(volumeflow<=500 && volumeflow>=0){
      
         counter4++;
        }
             
         double Temperature1 = rs.getDouble("Temperature");
             //System.out.println(Temperature1);
             
         if(Temperature1<=60 && Temperature1>=0){
      
         counter5++;
        }
         
          double rotationalspeed1 = rs.getDouble("RotationalSpeed");
             //System.out.println(rotationalspeed1);
             
         if(rotationalspeed1<=6000){
      
         counter6++;
        }
           double torque1 = rs.getDouble("Torque");
            // System.out.println(torque1);
             
         if(torque1 <=200 && torque1>=0){
      
         counter7++;
        }
             
             
             
             
    }
         
 
 
    sum_availability  =counter1+counter2+counter3+counter4+counter5+counter6+counter7;
      total_availability =((sum_availability/7)*100);  
       int total_hello=(int)total_availability;
        // jProgressBar_availability_total.setValue(total_hello);
         String avail1 = Double.toString(total_availability);
     double nonavailable=100-total_availability;
      series.add(i, nonavailable);
      // series.add(i, total_availability);
     
       //System.out.println(nonavailable);
        
    }
     XYSeriesCollection dataset =new XYSeriesCollection();
         dataset.addSeries(series);
         JFreeChart chart =ChartFactory.createXYLineChart("Non Availability Percentage Per Day", "Day", "Percentage(%)", dataset, PlotOrientation.VERTICAL, true,true,false);
       
         ChartFrame frame = new ChartFrame("Non Availability Percentage Per Day",chart);
         
        frame.pack();
        frame.setVisible(true);
   
         }catch(Exception e)
    {
           JOptionPane.showMessageDialog(null, e);

    }
        finally {
try{
  rs.close();
   pst.close();
     //conn.close();
  }
  catch(Exception e) {
                   }
      }  
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
           
         String gender=Combo_parameter.getSelectedItem().toString();
         
                //String sql="insert into pump (idpump,Date,Pressure1,Pressure2,Pressure3,VolumeFlow,Temperature,RotationalSpeed,Torque) values(?,?,?,?,?,?,?,?,?)";
      if (gender=="Select Parameter") {
              
    try{
        JOptionPane.showMessageDialog(null, "Please Select a Parameter from fields below");
               
    }catch(Exception e)
    {
           JOptionPane.showMessageDialog(null, e);

    }
      finally {
try{
  rs.close();
   pst.close();
     //conn.close();
  }
  catch(Exception e) {
                   }
      }  
         }
      else if(gender=="Date"){
      
       
              try{
        
        String sql1=" SELECT Count(Date) FROM pump  ";
    pst =conn.prepareStatement(sql1);
    rs=pst.executeQuery();
    
   // pst.setString(1, jTextField1.getText());
    String count_pr1=rs.getString("Count(Date)");
      count_p1_intform =Integer.parseInt(count_pr1);
        
         }catch(Exception e)
    {
           JOptionPane.showMessageDialog(null, e);

    }
        finally {
try{
  rs.close();
   pst.close();
     //conn.close();
  }
  catch(Exception e) {
                   }
      }          
             try{
        
      
            // pst.setString(1, jTextField1.getText());
    XYSeries series =new XYSeries("Graph");
    for(int i=1;i<=count_p1_intform;i++){
          String sql1=" SELECT date FROM pump where idpump ='"+i+"' ";
    pst =conn.prepareStatement(sql1);
    rs=pst.executeQuery();
         String  value_pr1 = rs.getString("date");
     int value_pr1_intform =Integer.parseInt(value_pr1);
     
       final DateFormat df = DateFormat.getInstance();
       
     series.add(i, value_pr1_intform);
      
    }
     XYSeriesCollection dataset =new XYSeriesCollection();
         dataset.addSeries(series);
         JFreeChart chart =ChartFactory.createXYLineChart(" Date Graph", "X axis", "Y axis", dataset, PlotOrientation.VERTICAL, true,true,false);
        ChartFrame frame = new ChartFrame("Date",chart);
        frame.pack();
        frame.setVisible(true);
    
         }catch(Exception e)
    {
           JOptionPane.showMessageDialog(null, e);

    }
        finally {
try{
  rs.close();
   pst.close();
     //conn.close();
  }
  catch(Exception e) {
                   }
      }         
      }
      
      
       else if(gender=="Pressure1"){
     
              try{
        
        String sql1=" SELECT Count(pressure1) FROM pump  ";
    pst =conn.prepareStatement(sql1);
    rs=pst.executeQuery();
    
   // pst.setString(1, jTextField1.getText());
    String count_pr1=rs.getString("Count(pressure1)");
      count_p1_intform =Integer.parseInt(count_pr1);
        
         }catch(Exception e)
    {
           JOptionPane.showMessageDialog(null, e);

    }
           finally {
try{
  rs.close();
   pst.close();
     //conn.close();
  }
  catch(Exception e) {
                   }
      }       
             try{
        
      
            // pst.setString(1, jTextField1.getText());
    XYSeries series =new XYSeries("Graph");
    for(int i=1;i<=count_p1_intform;i++){
          String sql1=" SELECT pressure1 FROM pump where idpump ='"+i+"' ";
    pst =conn.prepareStatement(sql1);
    rs=pst.executeQuery();
         String  value_pr1 = rs.getString("pressure1");
     int value_pr1_intform =Integer.parseInt(value_pr1);
     
        series.add(i, value_pr1_intform);
        
    }
     XYSeriesCollection dataset =new XYSeriesCollection();
         dataset.addSeries(series);
         JFreeChart chart =ChartFactory.createXYLineChart("Pressure1 Graph", "Days", "Pressure1 (Bar)", dataset, PlotOrientation.VERTICAL, true,true,false);
        ChartFrame frame = new ChartFrame("Pressure1",chart);
        frame.pack();
        frame.setVisible(true);
    
         }catch(Exception e)
    {
           JOptionPane.showMessageDialog(null, e);

    }
          finally {
try{
  rs.close();
   pst.close();
     //conn.close();
  }
  catch(Exception e) {
                   }
      }     
           
      }
       
       
        else if(gender=="Pressure2"){
        try{
        
        String sql1=" SELECT Count(pressure2) FROM pump  ";
    pst =conn.prepareStatement(sql1);
    rs=pst.executeQuery();
    
   // pst.setString(1, jTextField1.getText());
    String count_pr1=rs.getString("Count(pressure2)");
      count_p1_intform =Integer.parseInt(count_pr1);
        
         }catch(Exception e)
    {
           JOptionPane.showMessageDialog(null, e);

    }  finally {
try{
  rs.close();
   pst.close();
     //conn.close();
  }
  catch(Exception e) {
                   }
      }  
             try{
        
      
            // pst.setString(1, jTextField1.getText());
    XYSeries series =new XYSeries("Graph");
    for(int i=1;i<=count_p1_intform;i++){
          String sql1=" SELECT pressure2 FROM pump where idpump ='"+i+"' ";
    pst =conn.prepareStatement(sql1);
    rs=pst.executeQuery();
         String  value_pr1 = rs.getString("pressure2");
     int value_pr1_intform =Integer.parseInt(value_pr1);
     
        series.add(i, value_pr1_intform);
    }
     XYSeriesCollection dataset =new XYSeriesCollection();
         dataset.addSeries(series);
         JFreeChart chart =ChartFactory.createXYLineChart(" Pressure2 Graph", "Days", "Pressure2 (Bar)", dataset, PlotOrientation.VERTICAL, true,true,false);
        ChartFrame frame = new ChartFrame(" Pressure2 Graph",chart);
        frame.pack();
        frame.setVisible(true);
    
         }catch(Exception e)
    {
           JOptionPane.showMessageDialog(null, e);

    }
        finally {
try{
  rs.close();
   pst.close();
     //conn.close();
  }
  catch(Exception e) {
                   }
      }  
      }
        
         else if(gender=="Pressure3"){
        try{
        
        String sql1=" SELECT Count(pressure3) FROM pump  ";
    pst =conn.prepareStatement(sql1);
    rs=pst.executeQuery();
    
   // pst.setString(1, jTextField1.getText());
    String count_pr1=rs.getString("Count(pressure3)");
      count_p1_intform =Integer.parseInt(count_pr1);
        
         }catch(Exception e)
    {
           JOptionPane.showMessageDialog(null, e);

    }  finally {
try{
  rs.close();
   pst.close();
     //conn.close();
  }
  catch(Exception e) {
                   }
      }  
             try{
        
      
            // pst.setString(1, jTextField1.getText());
    XYSeries series =new XYSeries("Graph");
    for(int i=1;i<=count_p1_intform;i++){
          String sql1=" SELECT pressure3 FROM pump where idpump ='"+i+"' ";
    pst =conn.prepareStatement(sql1);
    rs=pst.executeQuery();
         String  value_pr1 = rs.getString("pressure3");
     int value_pr1_intform =Integer.parseInt(value_pr1);
     
        series.add(i, value_pr1_intform);
    }
     XYSeriesCollection dataset =new XYSeriesCollection();
         dataset.addSeries(series);
         JFreeChart chart =ChartFactory.createXYLineChart(" Pressure3 Graph", "Days", "Pressure3 (Bar)", dataset, PlotOrientation.VERTICAL, true,true,false);
        ChartFrame frame = new ChartFrame(" Pressure3 Graph",chart);
        frame.pack();
        frame.setVisible(true);
    
         }catch(Exception e)
    {
           JOptionPane.showMessageDialog(null, e);

    }  finally {
try{
  rs.close();
   pst.close();
     //conn.close();
  }
  catch(Exception e) {
                   }
      }  
      
      }
         
          else if(gender=="VolumeFlow"){
        try{
        
        String sql1=" SELECT Count(VolumeFlow) FROM pump  ";
    pst =conn.prepareStatement(sql1);
    rs=pst.executeQuery();
    
   // pst.setString(1, jTextField1.getText());
    String count_pr1=rs.getString("Count(VolumeFlow)");
      count_p1_intform =Integer.parseInt(count_pr1);
        
         }catch(Exception e)
    {
           JOptionPane.showMessageDialog(null, e);

    } finally {
try{
  rs.close();
   pst.close();
     //conn.close();
  }
  catch(Exception e) {
                   }
      }  
             try{
        
      
            // pst.setString(1, jTextField1.getText());
    XYSeries series =new XYSeries("Graph");
    for(int i=1;i<=count_p1_intform;i++){
          String sql1=" SELECT VolumeFlow FROM pump where idpump ='"+i+"' ";
    pst =conn.prepareStatement(sql1);
    rs=pst.executeQuery();
         String  value_pr1 = rs.getString("VolumeFlow");
     int value_pr1_intform =Integer.parseInt(value_pr1);
     
        series.add(i, value_pr1_intform);
    }
     XYSeriesCollection dataset =new XYSeriesCollection();
         dataset.addSeries(series);
         JFreeChart chart =ChartFactory.createXYLineChart("Volume Flow Graph", "Days", "VolumeFlow(m³/h)", dataset, PlotOrientation.VERTICAL, true,true,false);
        ChartFrame frame = new ChartFrame(" VolumeFlow Graph",chart);
        frame.pack();
        frame.setVisible(true);
    
         }catch(Exception e)
    {
           JOptionPane.showMessageDialog(null, e);

    }
        finally {
try{
  rs.close();
   pst.close();
     //conn.close();
  }
  catch(Exception e) {
                   }
      }  
      }
          
          
           else if(gender=="Temperature"){
      
       try{
        
        String sql1=" SELECT Count(Temperature) FROM pump  ";
    pst =conn.prepareStatement(sql1);
    rs=pst.executeQuery();
    
   // pst.setString(1, jTextField1.getText());
    String count_pr1=rs.getString("Count(Temperature)");
      count_p1_intform =Integer.parseInt(count_pr1);
        
         }catch(Exception e)
    {
           JOptionPane.showMessageDialog(null, e);

    }
         finally {
try{
  rs.close();
   pst.close();
     //conn.close();
  }
  catch(Exception e) {
                   }
      }  
             try{
        
      
            // pst.setString(1, jTextField1.getText());
    XYSeries series =new XYSeries("Graph");
    for(int i=1;i<=count_p1_intform;i++){
          String sql1=" SELECT Temperature FROM pump where idpump ='"+i+"' ";
    pst =conn.prepareStatement(sql1);
    rs=pst.executeQuery();
         String  value_pr1 = rs.getString("Temperature");
     int value_pr1_intform =Integer.parseInt(value_pr1);
     
        series.add(i, value_pr1_intform);
    }
     XYSeriesCollection dataset =new XYSeriesCollection();
         dataset.addSeries(series);
         JFreeChart chart =ChartFactory.createXYLineChart(" Temperature Graph", "Days", "Temperature(°C)", dataset, PlotOrientation.VERTICAL, true,true,false);
        ChartFrame frame = new ChartFrame(" Temperature Graph",chart);
        frame.pack();
        frame.setVisible(true);
    
         }catch(Exception e)
    {
           JOptionPane.showMessageDialog(null, e);

    }
        finally {
try{
  rs.close();
   pst.close();
     //conn.close();
  }
  catch(Exception e) {
                   }
      }  
           }
           
           
        else if(gender=="RotationalSpeed"){
        try{
        
        String sql1=" SELECT Count(RotationalSpeed) FROM pump  ";
    pst =conn.prepareStatement(sql1);
    rs=pst.executeQuery();
    
   // pst.setString(1, jTextField1.getText());
    String count_pr1=rs.getString("Count(RotationalSpeed)");
      count_p1_intform =Integer.parseInt(count_pr1);
        
         }catch(Exception e)
    {
           JOptionPane.showMessageDialog(null, e);

    }  finally {
try{
  rs.close();
   pst.close();
     //conn.close();
  }
  catch(Exception e) {
                   }
      }  
             try{
        
      
            // pst.setString(1, jTextField1.getText());
    XYSeries series =new XYSeries("Graph");
    for(int i=1;i<=count_p1_intform;i++){
          String sql1=" SELECT RotationalSpeed FROM pump where idpump ='"+i+"' ";
    pst =conn.prepareStatement(sql1);
    rs=pst.executeQuery();
         String  value_pr1 = rs.getString("RotationalSpeed");
     int value_pr1_intform =Integer.parseInt(value_pr1);
     
        series.add(i, value_pr1_intform);
    }
     XYSeriesCollection dataset =new XYSeriesCollection();
         dataset.addSeries(series);
         JFreeChart chart =ChartFactory.createXYLineChart(" RotationalSpeed Graph", "Days", "Rotational Speed", dataset, PlotOrientation.VERTICAL, true,true,false);
        ChartFrame frame = new ChartFrame("RotationalSpeed Graph",chart);
        frame.pack();
        frame.setVisible(true);
    
         }catch(Exception e)
    {
           JOptionPane.showMessageDialog(null, e);

    }
        finally {
try{
  rs.close();
   pst.close();
     //conn.close();
  }
  catch(Exception e) {
                   }
      }  
      }           

        
            else if(gender=="Torque"){
        try{
        
        String sql1=" SELECT Count(Torque) FROM pump  ";
    pst =conn.prepareStatement(sql1);
    rs=pst.executeQuery();
    
   // pst.setString(1, jTextField1.getText());
    String count_pr1=rs.getString("Count(Torque)");
      count_p1_intform =Integer.parseInt(count_pr1);
        
         }catch(Exception e)
    {
           JOptionPane.showMessageDialog(null, e);

    }  finally {
try{
  rs.close();
   pst.close();
     //conn.close();
  }
  catch(Exception e) {
                   }
      }  
             try{
        
      
            // pst.setString(1, jTextField1.getText());
    XYSeries series =new XYSeries("Graph");
    for(int i=1;i<=count_p1_intform;i++){
          String sql1=" SELECT Torque FROM pump where idpump ='"+i+"' ";
    pst =conn.prepareStatement(sql1);
    rs=pst.executeQuery();
         String  value_pr1 = rs.getString("Torque");
     int value_pr1_intform =Integer.parseInt(value_pr1);
     
        series.add(i, value_pr1_intform);
    }
     XYSeriesCollection dataset =new XYSeriesCollection();
         dataset.addSeries(series);
         JFreeChart chart =ChartFactory.createXYLineChart(" Torque Graph", "Days", "Torque (N-m)", dataset, PlotOrientation.VERTICAL, true,true,false);
        ChartFrame frame = new ChartFrame(" Torque Graph",chart);
        frame.pack();
        frame.setVisible(true);
    
         }catch(Exception e)
    {
           JOptionPane.showMessageDialog(null, e);

    }
        finally {
try{
  rs.close();
   pst.close();
     //conn.close();
  }
  catch(Exception e) {
                   }
      }  
      } 
        
        
   
      
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void cmd_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_backActionPerformed
         try{
  rs.close();
      pst.close();
     conn.close();
  }
  catch(Exception e) {
                   }
        
        User_JFrame s = new User_JFrame();
    s.setVisible(true);
   
     close2();
    }//GEN-LAST:event_cmd_backActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chart_JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chart_JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chart_JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chart_JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Chart_JFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox Combo_parameter;
    private javax.swing.JLabel Lbl_Date;
    private javax.swing.JButton cmd_AvaitabilityBarChart;
    private javax.swing.JButton cmd_back;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
  private int count_p1_intform;
                  private double  divide1,divide2,divide3,divide4,divide5,divide6,divide7;
                private float total_availability,sum_availability;

}
